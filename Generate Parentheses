import java.util.*;
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        
        backtrack(res,n,"",0,0);
        return res;
    }
    public void backtrack(List<String> res , int target, String s, int open, int close){
        if(s.length() == target*2){
            if(checkStr(s))res.add(s);
            return;
        }

        if(open < target) backtrack(res, target, s+"(", open++,close);

        if(close < open) backtrack(res, target, s+")", open, close++);
    }
    public boolean checkStr(String s){
        Stack<Character> st = new Stack<>();
        for(char c: s.toCharArray()){
            if(c == '('){
                st.push(c);
            }else{
                if(!st.empty() && st.peek() == '('){
                    st.pop();
                }else{
                    return false;
                }
            }
        }
        return st.empty() ? true : false;
    }
}
